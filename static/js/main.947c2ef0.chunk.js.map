{"version":3,"sources":["API.ts","Utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","assets/images/background.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","questionState","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNo","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","backgroundImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","setUserAnswer","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","document","getElementById"],"mappings":"0HAoBYA,E,+EAAAA,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAML,I,QAAMC,EAAkB,uCAAG,WAAOC,EAAgBC,GAAvB,mBAAAC,EAAA,6DAC1BC,EAD0B,6CACuBH,EADvB,uBAC4CC,EAD5C,2BAGNG,MAAMD,GAHA,8BAGWE,OAHX,cAG1BC,EAH0B,OAK1BC,EAAgBD,EAAKE,QAAQC,KAAI,SAACC,GAAD,mBAAC,eACnCA,GADkC,IAErCC,SCjCyBC,EDiCH,GAAD,mBAAKF,EAASG,mBAAd,CAAiCH,EAASI,iBChCjE,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADZ,IAACL,KD0BK,kBAUzBL,GAVyB,2CAAH,wD,cExBlBW,EAAUC,IAAOC,IAAV,8PAmBPC,EAAgBF,IAAOC,IAAV,6ZAaR,gBAAEE,EAAF,EAAEA,QAASC,EAAX,EAAWA,YAAX,OACZD,EACI,4CACEA,GAAWC,EACb,2CACA,8C,OCJKC,EAtBiB,SAAC,GAAD,IAAEd,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,QAASc,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,WAAYC,EAA3C,EAA2CA,WAAYC,EAAvD,EAAuDA,eAAvD,OAC5B,eAACV,EAAD,WACE,oBAAGW,UAAU,SAAb,uBACaF,EADb,MAC4BC,KAE5B,mBAAGE,wBAAyB,CAACC,OAAQrB,KACrC,8BACGC,EAAQF,KAAI,SAAAuB,GAAM,OACjB,cAACX,EAAD,CAEEC,SAAmB,OAAVI,QAAU,IAAVA,OAAA,EAAAA,EAAYO,iBAAkBD,EACvCT,aAAuB,OAAVG,QAAU,IAAVA,OAAA,EAAAA,EAAYM,UAAWA,EAHtC,SAKE,wBAAQE,WAAYR,EAAYS,MAAOH,EAAQI,QAASX,EAAxD,SACE,sBAAMK,wBAAyB,CAACC,OAAQC,QALrCA,YCtBF,MAA0B,uCCI5BK,EAAcC,YAAH,qVAMIC,GAefrB,EAAUC,IAAOC,IAAV,u/BCgFLoB,EAtFC,WACd,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAA0B,IAA5D,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAoCN,mBAAyB,IAA7D,mBAAOf,EAAP,KAAmBsB,EAAnB,KACA,EAA0BP,mBAAS,GAAnC,mBAAOQ,EAAP,KAAcC,EAAd,KACA,EAAgCT,oBAAS,GAAzC,mBAAOU,EAAP,KAAiBC,EAAjB,KAEMC,EAAW,uCAAG,4BAAAnD,EAAA,6DAClByC,GAAW,GACXS,GAAY,GAFM,SAISrD,EArBP,GAqB2CD,EAAWwD,MAJxD,OAIZC,EAJY,OAMlBV,EAAaU,GACbL,EAAS,GACTF,EAAc,IACdD,EAAU,GACVJ,GAAW,GAVO,4CAAH,qDA8CjB,OACE,qCACE,cAACN,EAAD,IACA,eAAC,EAAD,WACE,6CACEc,GApEc,KAoEFzB,EAAW8B,SACvB,wBAAQ3B,UAAU,QAAQO,QAASiB,EAAnC,oBAIAF,GAAY,oBAAGtB,UAAU,QAAb,oBAA6BoB,KAC1CP,GAAW,uDACTA,IAAYS,GACb,cAAC,EAAD,CACExB,WAAYmB,EAAS,EACrBlB,eA9EY,GA+EZlB,SAAUkC,EAAUE,GAAQpC,SAC5BC,QAASiC,EAAUE,GAAQnC,QAC3Be,WAAYA,EAAaA,EAAWoB,QAAUW,EAC9ChC,SApDU,SAACiC,GACnB,IAAKP,EAAU,CAEb,IAAMnB,EAAS0B,EAAEC,cAAcxB,MAGzBb,EAAUsB,EAAUE,GAAQhC,iBAAmBkB,EAGjDV,GAAS4B,GAAS,SAAAU,GAAI,OAAIA,EAAO,KAGrC,IAAMC,EAAe,CACnBnD,SAAUkC,EAAUE,GAAQpC,SAC5BsB,SACAV,UACAW,cAAeW,EAAUE,GAAQhC,gBAGnCkC,GAAc,SAACY,GAAD,4BAAcA,GAAd,CAAoBC,YAoC7BV,IAAaT,GAAWhB,EAAW8B,SAAWV,EAAS,GAAgBgB,IAAXhB,GAC3D,wBAAQjB,UAAU,OAAOO,QAjCd,WAEnB,IAAM2B,EAAejB,EAAS,EAvDV,KAyDhBiB,EACFX,GAAY,GAEZL,EAAUgB,IA0BJ,kCC5FZC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.947c2ef0.chunk.js","sourcesContent":["import { shuffleArray } from \"./Utils\";\r\n\r\ninterface DataModel {\r\n  response_code: number;\r\n  results: Question[];\r\n}\r\n\r\nexport interface Question {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n}\r\n\r\nexport interface QuestionState extends Question {\r\n  answers: string[];\r\n}\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n\r\n  const data = await (await fetch(endpoint)).json() as DataModel;\r\n\r\n  const questionState = data.results.map((question) => ({\r\n    ...question,\r\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer]) as string[]\r\n  }))\r\n\r\n  return questionState;\r\n}","export const shuffleArray = (array: any[]) => (\r\n  [...array].sort(() => Math.random() - 0.5)\r\n);","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`\r\n\r\ninterface ButtonWrapperProps {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n}\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({correct, userClicked}) => \r\n      correct \r\n        ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n        : (!correct && userClicked) \r\n        ? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'\r\n    };\r\n    border: 3px solid #fff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`","import { FC, MouseEvent } from 'react';\r\nimport { AnswerObject } from \"../App\";\r\nimport { ButtonWrapper, Wrapper } from './QuestionCard.styles';\r\n\r\ninterface Props {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNo: number;\r\n  totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: FC<Props> = ({question, answers, callback, userAnswer, questionNo, totalQuestions}) => (\r\n    <Wrapper>\r\n      <p className=\"number\">\r\n        Question: {questionNo} / {totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{__html: question}} />\r\n      <div>\r\n        {answers.map(answer => (\r\n          <ButtonWrapper \r\n            key={answer} \r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userClicked={userAnswer?.answer === answer}\r\n          >\r\n            <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n              <span dangerouslySetInnerHTML={{__html: answer}} />\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n);\r\n\r\nexport default QuestionCard\r\n","export default __webpack_public_path__ + \"static/media/background.0ea1ed92.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nimport backgroundImage from \"./assets/images/background.jpg\"\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n\r\n  body {\r\n    background-image: url(${backgroundImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0, 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    font-family: 'Catamaran', 'sans-serif';\r\n    user-select: none;\r\n  }\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #fff\r\n  }\r\n\r\n  .score {\r\n    color: black;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-family: Fascinate Inline, Haettenschweiler, 'Arial Narrow Bold', sans-serif;\r\n    background-image: inline-linear-gradient(180deg, #fff, #87f1ff);\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -web-kit-background-clip: text;\r\n    -web-kit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n\r\n  .start, .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #fff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`","import { FC, MouseEvent, useState } from 'react';\nimport { fetchQuizQuestions } from \"./API\"\n// Components\nimport QuestionCard from \"./components/QuestionCard\";\n// Types\nimport { Difficulty, QuestionState } from \"./API\";\n// Styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\n\nconst TOTAL_QUESTIONS = 10;\n\nexport interface AnswerObject {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst App: FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswer, setUserAnswer] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswer([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // Users answer\n      const answer = e.currentTarget.value;\n\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n\n      // Add score if answer is correct \n      if (correct) setScore(prev => prev + 1);\n\n      // Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer, \n        correct,\n        correctAnswer: questions[number].correct_answer,\n      }\n\n      setUserAnswer((prev) => [...prev, answerObject]);\n    }\n  }\n\n  const nextQuestion = () => {\n    // Move on to the next question, if not the last question\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  }\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>REACT QUIZ</h1>\n        {(gameOver || userAnswer.length === TOTAL_QUESTIONS) && (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        )}\n        {!gameOver && <p className=\"score\">Score: {score}</p>}\n        {loading && <p>Loading Questions ...</p>}\n        {(!loading && !gameOver) && (\n          <QuestionCard\n            questionNo={number + 1}  \n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswer ? userAnswer[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {(!gameOver && !loading && userAnswer.length === number + 1 && number !== TOTAL_QUESTIONS - 1) && (\n            <button className=\"next\" onClick={nextQuestion}>\n              Next Question\n            </button>\n          )}\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}